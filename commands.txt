LOAD CSV WITH HEADERS FROM 'file:///movie.csv' 
AS row MERGE (m:movie {name: row.name, release_period: row.release_period, remake: row.remake, franchise: row.franchise, genre:row.genre, screens: toInteger(row.screens), revenue: toInteger(row.revenue), budget:toInteger(row.budget)});

CREATE CONSTRAINT ON (m:movie) ASSERT m.name IS UNIQUE;

LOAD CSV WITH HEADERS FROM 'file:///director_movie.csv' 
AS row MERGE (d:director {name: row.director}) MERGE (m:movie {name: row.movie}) MERGE (d)-[r:direct {new_director: row.new_director}]->(m);

LOAD CSV WITH HEADERS FROM 'file:///actor_movie.csv' 
AS row MERGE (a:actor {name: row.actor}) MERGE (m:movie {name: row.movie}) MERGE (a)-[r:act_in {new_actor: row.new_actor}]->(m);

CREATE CONSTRAINT ON (a:actor) ASSERT a.name IS UNIQUE;
CREATE CONSTRAINT ON (d:director) ASSERT d.name IS UNIQUE;

//clear the database
MATCH (n)
DETACH DELETE n;
DROP CONSTRAINT ON (m:movie) ASSERT m.name IS UNIQUE;
DROP CONSTRAINT ON (a:actor) ASSERT a.name IS UNIQUE;
DROP CONSTRAINT ON (d:director) ASSERT d.name IS UNIQUE;


MATCH (a:actor {name: "Aamir Khan"}) --> (m:movie) RETURN sum(m.revenue)

MATCH (a:actor) -[r:act_in {new_actor: "Yes"}]-> (m:movie) RETURN a.name, m.name, m.revenue ORDER BY m.revenue DESC LIMIT 10;

MATCH (d:director) -[r:direct {new_director: "Yes"}]-> (m:movie) RETURN d.name, m.name, m.revenue ORDER BY m.revenue DESC

MATCH (a:actor) --> (m:movie) <-- (d:director) RETURN a.name, COUNT(DISTINCT(m.name)) AS num_collab, d.name ORDER BY num_collab DESC 

MATCH (a:actor) --> (m:movie {genre: "thriller"}) RETURN a.name, COUNT(DISTINCT(m.name)) AS Thriller ORDER BY Thriller DESC LIMIT 10;

MATCH (a:actor) --> (m:movie {genre: "horror"}) RETURN a.name, COUNT(DISTINCT(m.name)) AS Horror ORDER BY Horror DESC 

Emraan Hashmi

MATCH (m:movie) RETURN m.name, m.release_period, m.revenue, m.screens, toFloat(m.revenue/m.screens) AS revenue_per_screen ORDER BY revenue_per_screen DESC



community detection

CALL gds.graph.create.cypher(
    'bollywood-graph',
    'MATCH (n) RETURN id(n) AS id',
    'MATCH (n)--(m) RETURN id(n) AS source, id(m) AS target'
)


CALL gds.wcc.stream('bollywood-graph')
YIELD nodeId, componentId
RETURN  componentId, COUNT(componentId) as count
ORDER BY count DESC LIMIT 10;


CALL gds.wcc.stream('bollywood-graph')
YIELD nodeId, componentId
WHERE componentId = 0
RETURN  gds.util.asNode(nodeId).name AS name, componentId ORDER BY name;



CALL gds.wcc.stream('bollywood-graph')
YIELD nodeId, componentId
WHERE componentId = 0
RETURN  DISTINCT(gds.util.asNode(nodeId).name) AS name, componentId ORDER BY name;

CALL gds.wcc.stream('bollywood-graph')
YIELD nodeId, componentId
WHERE componentId = 0
WITH  COLLECT(DISTINCT(gds.util.asNode(nodeId).name)) AS name_list
MATCH path=(a:actor) --> (m:movie) <--(d:director)
WHERE (a.name IN name_list) AND (m.name IN name_list) AND (d.name IN name_list)
RETURN path LIMIT 2000;
